# AUTOGENERATED! DO NOT EDIT! File to edit: LessonTwo-DogsvCats.ipynb.

# %% auto 0
__all__ = ['temp', 'learn', 'categories', 'image', 'label', 'examples', 'intf', 'is_cat', 'classify_image']

# %% LessonTwo-DogsvCats.ipynb 1
from fastai.vision.all import *
import gradio as gr

#We need a way to label our images as dogs or cats. 
#In this dataset, pictures of cats are given a filename that starts with a capital letter:
def is_cat(x): return x[0].isupper()

# %% LessonTwo-DogsvCats.ipynb 3
# PosixPath is used with Linux while WindowsPath is used with Windows.
# I need this code to adapt from using the originally intended Linux path to the Windows path. 
import pathlib

temp = pathlib.PosixPath
pathlib.PosixPath = pathlib.WindowsPath

# %% LessonTwo-DogsvCats.ipynb 4
learn = load_learner('model.pkl')

# %% LessonTwo-DogsvCats.ipynb 6
categories = ('Dog', 'Cat')

# Gradio requires that we give it a function that we will call, so here's the function
# It returns a dictionary of each category and its probabilities
# Gradio can't handle tensors, so we have to change each probability to a floating number

def classify_image(im):
    pred,idx,probs = learn.predict(im)
    return dict(zip(categories, map(float,probs)))


# %% LessonTwo-DogsvCats.ipynb 8
# Here we create a Gradio interface
image = gr.inputs.Image(shape=(192,192))
label = gr.outputs.Label()
examples = ['dog1.jpg', 'cat1.jpg', 'dog2.jpg', 'cat2.jpg']

intf = gr.Interface(fn=classify_image, inputs=image, outputs=label, examples=examples)
intf.launch(inline=False)
